#!/usr/bin/python2
from __future__ import print_function

# Copyright (c) 2013 Justus Winter <4winter@informatik.uni-hamburg.de>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import sys
import os
sys.path.append(os.curdir+"/.build")
import sh
import argparse

# Definition of the commandline arguments
def setupArguments():

  prog = "build"
  desc = "go-mpi build tool"

  argParser = argparse.ArgumentParser(prog=prog, description=desc,
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)

  argParser.add_argument("--lib-path", "-L", action="store", default=["/usr/lib/"],
    dest='libPath', nargs='+', help="The library path of the MPI library.")

  argParser.add_argument("--lib", "-l", action="store", default=["mpi"],
    dest='lib', nargs='+', help="The MPI library name. This option will override\
    the library name provide by pkg-config.")

  argParser.add_argument("--include-path", "-I", action="store",
    default=["/usr/include"], nargs='+', dest="includePath",
    help="A list of include paths to search for mpi header files. This option\
    will override the include path provides by pkg-config.")

  argParser.add_argument("--verbose", "-v", action="store_true", default=False,
    dest="verbose", help="Print the commands executed by the go tools.")

  argParser.add_argument("--install-as", "-a", action="store", default="MPI",
    dest="installName", help="The name of the Package for the mpi bindings.")

  argParser.add_argument("--pkg-config", "-p", action="store", dest="pkgConfig",
    default="Pkg name of the MPI library.Open MPI: ompi", help="""The pkg-config package name ,
if it differs form the default package names.""")

  argParser.add_argument("--debug", "-d", action="store_true", default=False,
    dest="debug", help="Debug build the bindings. (Enable array bound checking.)")
  argParser.add_argument("implDeps",action="store", default="generic",
    choices=["generic", "openmpi", "mpich2"],
    help="Choose a mpi implementation, the bindings should be optimised for. 'generic'\
    should work with all mpi implementations but maybe some features are missing.")

  return argParser

# Takes a output line form a commando run with sh and print it
def output_callback(lines):

  lineList = lines.split("\n")
  for line in lineList:
    print("\t", line)


# Ensure the directory structure inside the GOPATH
def setupSrc(path, options):

  srcPath = os.path.join(path, "src/", options.installName)
  print("Creating GOPATH directory structure.")
  if options.verbose:
    print("\t", srcPath)

  try:
    sh.mkdir(srcPath , v=options.verbose, p=True, _out=output_callback)
  except(Exception) as e:
    print(e.stdout)
    print("Could not create source folder inside the GOPATH.")
    sys.exit(1)

  print("Coping generic files.")
  try:
    sh.cp(sh.glob("src/generic/*"), srcPath, v=options.verbose,
      _out=output_callback)
  except(Exception) as e:
    print(e.stdout)
    print("Failed to copy generic files.")
    sys.exit(1)

  if options.implDeps != "generic":
    print("Coping implementation dependent files for", end=" ")

  if options.implDeps == "openmpi":
    print("Open MPI.")
    try:
      sh.cp(sh.glob("src/openmpi/*"), srcPath, v=options.verbose,
        _out=output_callback)
    except(Exception) as e:
      print(e.stdout)
      print("Failed to copy source code files for openmpi.")
      sys.exit(1)

def main():


  argParser = setupArguments()
  options = argParser.parse_args()
  # get the GOPATH, if not set use /usr/lib/go/site/
  goPath  = os.environ.get("GOPATH", "/usr/lib/go/site/")
  os.environ["GOPATH"] = goPath
  setupSrc(goPath, options)

  libPathDefault = argParser.get_default("libPath")
  libDefault = argParser.get_default("lib")
  includePathDefault = argParser.get_default("includePath")
  pkgDefault = argParser.get_default("pkgConfig")

  print("Generating cgo ldfalgs")

  libPath = ""
  lib = ""
  includePath = ""

  # Set default values
  for path in libPathDefault:
      libPath += " -L " + path
  for path in libDefault:
      lib += " -l " + path
  for path in includePathDefault:
      includePath += " -I " + path

  # use pkg-config to override the  default values
  # use a custom package name if provided
  if options.pkgConfig != pkgDefault:
    try:
      libPath = str(sh.pkg_config(options.pkgConfig, libs=True))
      lib = ""
      includePath = str(sh.pkg_config(options.pkgConfig, cfalgs=True))
    except(Exception) as e:
      print(e.stdout)
      print("pkg-config failed.")
      sys.exit(1)
  # or use the default package name of the chosen MPI implementation
  else:
    if options.implDeps == "openmpi":
      try:
        libPath = str(sh.pkg_config("ompi", libs=True))
        lib = ""
        includePath = str(sh.pkg_config("ompi", cflags=True))
      except(Exception) as e:
        print(e.stdout)
        print("pkg-config failed.")
        sys.exit(1)
  # if ldflags or cflags are provided with the command line override the flags
  if options.libPath != libPathDefault:
    libPath = ""
    for path in options.libPath:
      libPath += " -L " + path
  if options.lib != libDefault:
    lib = ""
    for path in options.lib:
      lib += " -l " + path
  if options.includePath != includePathDefault:
    includePath = ""
    for path in options.includePath:
      includePath += " -I " + path

  # set the falgs
  os.environ["CGO_LDFLAGS"] = libPath + lib
  os.environ["CGO_CFLAGS"] = includePath

  if options.verbose:
    print("CGO env variables:")
    print("\t", os.environ["CGO_LDFLAGS"])
    print("\t", os.environ["CGO_CFLAGS"])

  installFlags = ["install"]

  if options.verbose:
    installFlags.append("-x")
    installFlags.append("-v")

  if options.debug:
    pass
  else:
    installFlags.append("-gcflags")
    installFlags.append("-B")

  installFlags.append(options.installName)

  try:
    print(sh.go(installFlags))
  except(Exception) as e:
    print(e.stdout)
    print("Go install failed!")
    sys.exit(1)
main()

